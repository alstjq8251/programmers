import java.util.*;
import java.util.Arrays;
import java.util.Collections;
class Solution {
    int answer =0;
    boolean prime[];
    Set<Integer> set = new HashSet<>();
    boolean[] visited;
    public int solution(String numbers) {
        String[] number = numbers.split("");
        Arrays.sort(number,Collections.reverseOrder());
        numbers = "";
        for(int i=0; i<number.length; i++){
            numbers += number[i];
        }
        visited = new boolean[numbers.length()];
        prime = new boolean[Integer.parseInt(numbers)+1];
        prime[0] = prime[1] = true;
        int N = Integer.parseInt(numbers);
        for(int i=2; i*i<=N; i++){
        // prime[i]가 소수라면
            if(!prime[i]){
                // prime[j] 소수가 아닌 표시
                for(int j=i*i; j<=N; j+=i) prime[j] = true;                
            }
        }
        dfs("",0,numbers);
        return set.size();
    }
    public void dfs(String str, int depth,String number){
        if(depth == number.length()+1)
            return;
        else{
            if(str != ""){
                if(!prime[Integer.parseInt(str)])
                    set.add(Integer.parseInt(str));
            }
        }
        for(int i=0; i<number.length(); i++){
            if(!visited[i]){
                visited[i] = true;
                dfs(str+number.charAt(i), depth+1,number);
                visited[i] = false;
            }
        }
    }
}
