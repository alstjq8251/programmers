class Solution {
    int solution(int[][] land) {
        int answer = 0;
        int max=0;
        int temporalMax=0;
        int secondMax=0;
        int temporalSecond=0;
        for(int i=0; i<land.length; i++){
            for(int y=0; y<land[i].length; y++){
                if(i != 0){
                    if(land[i-1][y] != max){
                        land[i][y] += max;
                    }else{
                        land[i][y] += secondMax;
                    }
                }
                temporalMax = Math.max(land[i][y],temporalMax);
                if(land[i][y] !=temporalMax)
                    temporalSecond = land[i][y];
            }
            max=temporalMax;
            secondMax=temporalSecond;
        }
        
        answer = max;
        return answer;
    }
}

dp로 접근할때 위에서는 최대값, 차선값만 생각했을때 중복값이 나오는 케이스를 잡아낼 수 없었음 - 하지만 문제는 최댓값 차선값이 아닌 자신의 윗칸을 제외한 최댓값이었음
다른 블로그를 참고한 결과 그전 결과를 계속 사용해가며 중복된 포문을 돌리지 않는것이 최선의 결과
- Math.max로 자신의 윗칸을 제외한 3개의 칸의 max값을 더해서 값을 계산한 후 마지막 칸의 최대값을 구하는 것이 동적계획법... 무섭

class Solution {
    int solution(int[][] land) {
        int answer=0;
        for(int i=1; i<land.length; i++){
            land[i][0]+=Math.max(Math.max(land[i-1][1],land[i-1][2]),land[i-1][3]);
            land[i][1]+=Math.max(Math.max(land[i-1][0],land[i-1][2]),land[i-1][3]);
            land[i][2]+=Math.max(Math.max(land[i-1][1],land[i-1][0]),land[i-1][3]);
            land[i][3]+=Math.max(Math.max(land[i-1][1],land[i-1][2]),land[i-1][0]);
        }
        for(int i=0; i<land[land.length-1].length; i++){
            answer = Math.max(answer,land[land.length-1][i]);
        }
        return answer;
    }
}
