import java.util.*;
class Solution {
    public long solution(int[] queue1, int[] queue2) {
        long sum1=0;
        long sum2=0;
        Queue<Long> q1 = new LinkedList<>();
        Queue<Long> q2 = new LinkedList<>();
        for(int i=0; i<queue1.length; i++){
            q1.offer((long)queue1[i]);
            q2.offer((long)queue2[i]);
            sum1 += queue1[i];
            sum2 += queue2[i];
        }
        long total = sum1+ sum2;
        if(total %2 != 0)
            return -1;
        if(sum1 == sum2)
            return 0;
        long half = total/2;
        long a=0;
        long loop=0;
        int amove=0;
        int bmove=0;
        while(amove <= queue1.length*2 &&bmove <=queue2.length*2){
            if(sum1 == half|| sum2 == half)
                return loop;
            loop++;
            if(sum1 > half){
                a = q1.poll();
                sum1 -= a;
                sum2 += a;
                q2.offer(a);
                amove++;
                if(sum1 == half)
                    return loop;
            }
            else{
                a = q2.poll();
                sum2 -=a;
                sum1 +=a;
                q1.offer(a);
                bmove++;
                if(sum2 == half)
                    return loop;
            }
        }
        long answer = -1;
        return answer;
    }
}
